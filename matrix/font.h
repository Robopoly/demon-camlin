#ifndef _FONT_H
#define _FONT_H

#include <avr/pgmspace.h>

/*
 * Andrew Watson - 2009
 *
 * 5x7 font for digits and letters
 * source : Alf Storm ( via http://heim.ifi.uio.no/haakoh/avr/ )
 * other characters (symbols) manually copied from LCD datasheet
 *
 * warning : characters are stored in program memory and NOT loaded into SRAM.
 * to read a character, use the following syntax : 
 * byte = pgm_read_byte(&(letters_5x7[i][j]));
 * ref : http://www.nongnu.org/avr-libc/user-manual/pgmspace.html
 * 
 * Implemented about half of ASCII charset (enough for most purposes)
 * since we have plenty of program memory.
 * NB : lower-case and upper-case are identical, but at least writing a
 * lower-case string will degrade gracefully into upper-case without needing
 * any code. Text will display as intended if someone decides to extend the charset.
 *
 */

const unsigned char letters_5x7[91][5] PROGMEM = {
  {0x00, 0x00, 0x00, 0x00, 0x00}, // Space
  {0x00, 0x7d, 0x00, 0x00, 0x00}, // !
  {0x00, 0x70, 0x00, 0x70, 0x00}, // "
  {0x14, 0x7f, 0x14, 0x7f, 0x14}, // #
  {0x12, 0x2A, 0x7f, 0x2A, 0x24}, // $
  {0x62, 0x64, 0x08, 0x13, 0x23}, // %
  {0x36, 0x49, 0x55, 0x22, 0x05}, // &
  {0x00, 0x60, 0x00, 0x00, 0x00}, // '
  {0x00, 0x1c, 0x22, 0x41, 0x00}, // (
  {0x00, 0x41, 0x22, 0x1c, 0x00}, // )
  {0x14, 0x08, 0x3e, 0x08, 0x14}, // *
  {0x08, 0x08, 0x3e, 0x08, 0x08}, // +
  {0x00, 0x05, 0x06, 0x00, 0x00}, // ,
  {0x08, 0x08, 0x08, 0x08, 0x08}, // -
  {0x00, 0x03, 0x03, 0x00, 0x00}, // .
  {0x02, 0x04, 0x08, 0x10, 0x20}, // /

  {0x3e, 0x45, 0x49, 0x51, 0x3e}, // 0
  {0x00, 0x10, 0x20, 0x7f, 0x00}, // 1
  {0x47, 0x49, 0x49, 0x49, 0x31}, // 2
  {0x42, 0x49, 0x59, 0x69, 0x46}, // 3
  {0x08, 0x18, 0x28, 0x7f, 0x08}, // 4
  {0x71, 0x49, 0x49, 0x49, 0x46}, // 5
  {0x3e, 0x49, 0x49, 0x49, 0x06}, // 6
  {0x40, 0x47, 0x48, 0x50, 0x60}, // 7
  {0x36, 0x49, 0x49, 0x49, 0x36}, // 8
  {0x30, 0x49, 0x49, 0x49, 0x3e}, // 9

  {0x00, 0x36, 0x36, 0x00, 0x00}, // :
  {0x00, 0x35, 0x36, 0x00, 0x00}, // ;
  {0x08, 0x14, 0x22, 0x41, 0x00}, // <
  {0x14, 0x14, 0x14, 0x14, 0x14}, // =
  {0x41, 0x22, 0x14, 0x08, 0x00}, // >
  {0x20, 0x40, 0x45, 0x48, 0x30}, // ?
  {0x26, 0x49, 0x4f, 0x41, 0x3e}, // @

  {0x3f, 0x48, 0x48, 0x48, 0x3f}, // A
  {0x7f, 0x49, 0x49, 0x49, 0x36}, // B
  {0x3e, 0x41, 0x41, 0x41, 0x22}, // C
  {0x7f, 0x41, 0x41, 0x22, 0x1c}, // D
  {0x7f, 0x49, 0x49, 0x49, 0x41}, // E
  {0x7f, 0x48, 0x48, 0x48, 0x40}, // F
  {0x3e, 0x41, 0x49, 0x49, 0x2e}, // G
  {0x7f, 0x08, 0x08, 0x08, 0x7f}, // H
  {0x00, 0x41, 0x7f, 0x41, 0x00}, // I
  {0x06, 0x01, 0x01, 0x01, 0x7e}, // J
  {0x7f, 0x08, 0x14, 0x22, 0x41}, // K
  {0x7f, 0x01, 0x01, 0x01, 0x01}, // L
  {0x7f, 0x20, 0x10, 0x20, 0x7f}, // M
  {0x7f, 0x10, 0x08, 0x04, 0x7f}, // N
  {0x3e, 0x41, 0x41, 0x41, 0x3e}, // O
  {0x7f, 0x48, 0x48, 0x48, 0x30}, // P
  {0x3e, 0x41, 0x45, 0x42, 0x3d}, // Q
  {0x7f, 0x48, 0x4c, 0x4a, 0x31}, // R
  {0x31, 0x49, 0x49, 0x49, 0x46}, // S
  {0x40, 0x40, 0x7f, 0x40, 0x40}, // T
  {0x7e, 0x01, 0x01, 0x01, 0x7e}, // U
  {0x7c, 0x02, 0x01, 0x02, 0x7c}, // V
  {0x7f, 0x02, 0x04, 0x02, 0x7f}, // W
  {0x63, 0x14, 0x08, 0x14, 0x63}, // X
  {0x60, 0x10, 0x0f, 0x10, 0x60}, // Y
  {0x43, 0x45, 0x49, 0x51, 0x61}, // Z

	// NOT IMPLEMENTED
  {0x00, 0x00, 0x00, 0x00, 0x00}, // [
  {0x00, 0x00, 0x00, 0x00, 0x00}, // Yen
  {0x00, 0x00, 0x00, 0x00, 0x00}, // ]
  {0x00, 0x00, 0x00, 0x00, 0x00}, // ^
  {0x00, 0x00, 0x00, 0x00, 0x00}, // _
  {0x00, 0x00, 0x00, 0x00, 0x00}, // `

	// COPY OF UPPER-CASE LETTERS
  {0x3f, 0x48, 0x48, 0x48, 0x3f}, // a
  {0x7f, 0x49, 0x49, 0x49, 0x36}, // b
  {0x3e, 0x41, 0x41, 0x41, 0x22}, // c
  {0x7f, 0x41, 0x41, 0x22, 0x1c}, // d
  {0x7f, 0x49, 0x49, 0x49, 0x41}, // e
  {0x7f, 0x48, 0x48, 0x48, 0x40}, // f
  {0x3e, 0x41, 0x49, 0x49, 0x2e}, // g
  {0x7f, 0x08, 0x08, 0x08, 0x7f}, // h
  {0x00, 0x41, 0x7f, 0x41, 0x00}, // i
  {0x06, 0x01, 0x01, 0x01, 0x7e}, // j
  {0x7f, 0x08, 0x14, 0x22, 0x41}, // k
  {0x7f, 0x01, 0x01, 0x01, 0x01}, // l
  {0x7f, 0x20, 0x10, 0x20, 0x7f}, // m
  {0x7f, 0x10, 0x08, 0x04, 0x7f}, // n
  {0x3e, 0x41, 0x41, 0x41, 0x3e}, // o
  {0x7f, 0x48, 0x48, 0x48, 0x30}, // p
  {0x3e, 0x41, 0x45, 0x42, 0x3d}, // q
  {0x7f, 0x48, 0x4c, 0x4a, 0x31}, // r
  {0x31, 0x49, 0x49, 0x49, 0x46}, // s
  {0x40, 0x40, 0x7f, 0x40, 0x40}, // t
  {0x7e, 0x01, 0x01, 0x01, 0x7e}, // u
  {0x7c, 0x02, 0x01, 0x02, 0x7c}, // v
  {0x7f, 0x02, 0x04, 0x02, 0x7f}, // w
  {0x63, 0x14, 0x08, 0x14, 0x63}, // x
  {0x60, 0x10, 0x0f, 0x10, 0x60}, // y
  {0x43, 0x45, 0x49, 0x51, 0x61}, // z
};


#endif
